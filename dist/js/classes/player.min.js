class Player{static getConfig(s){return{level:$('input[name="level"]').val(),race:$('select[name="race"]').val(),aqbooks:"Yes"==$('select[name="aqbooks"]').val(),reactionmin:parseInt($('input[name="reactionmin"]').val()),reactionmax:parseInt($('input[name="reactionmax"]').val()),adjacent:parseInt($('input[name="adjacent"]').val()),mode:globalThis.mode,target:{level:parseInt($('input[name="targetlevel"]').val()),basearmor:parseInt($('select[name="targetbasearmor"]').val()||$('input[name="targetcustomarmor"]').val()),defense:5*parseInt($('input[name="targetlevel"]').val()),resistance:parseInt($('input[name="targetresistance"]').val()),speed:1e3*parseFloat($('input[name="targetspeed"]').val()),mindmg:parseInt($('input[name="targetmindmg"]').val()),maxdmg:parseInt($('input[name="targetmaxdmg"]').val()),bleedreduction:$('select[name="bleedreduction"]').val()}}}constructor(s,t,e,a){if(a||(a=Player.getConfig()),this.rage=0,this.ragemod=1,this.level=a.level,this.rageconversion=.0091107836*this.level*this.level+3.225598133*this.level+4.2652911,25==this.level&&(this.rageconversion=82.25),40==this.level&&(this.rageconversion=140.5),this.agipercrit=this.getAgiPerCrit(this.level),this.timer=0,this.itemtimer=0,this.dodgetimer=0,this.crittimer=0,this.critdmg=1,this.extraattacks=0,this.batchedextras=0,this.nextswinghs=!1,this.nextswingcl=!1,this.freeslam=!1,this.ragecostbonus=0,this.race=a.race,this.aqbooks=a.aqbooks,this.reactionmin=a.reactionmin,this.reactionmax=a.reactionmax,this.adjacent=a.adjacent,this.spelldamage=0,this.target=a.target,this.mode=a.mode,this.bleedmod=parseFloat(this.target.bleedreduction),this.target.misschance=this.getTargetSpellMiss(),this.target.mitigation=this.getTargetSpellMitigation(),this.target.binaryresist=this.getTargetSpellBinaryResist(),this.base={ap:0,agi:0,str:0,hit:0,crit:0,spellcrit:0,skill_0:5*this.level,skill_1:5*this.level,skill_2:5*this.level,skill_3:5*this.level,skill_4:5*this.level,skill_5:5*this.level,skill_6:5*this.level,skill_7:this.level<35?225:300,haste:1,strmod:1,agimod:1,dmgmod:1,spelldmgmod:1,apmod:1,baseapmod:1,resist:{shadow:0,arcane:0,nature:0,fire:0,frost:0},block:0},1==e?(this.testEnch=s,this.testEnchType=t):2==e?(this.testTempEnch=s,this.testTempEnchType=t):3==e?0==t?this.base.ap+=s:1==t?this.base.crit+=s:2==t?this.base.hit+=s:3==t?this.base.str+=s:4==t&&(this.base.agi+=s):(this.testItem=s,this.testItemType=t),this.stats={},this.auras={},this.spells={},this.items=[],this.addRace(),this.addTalents(),this.addGear(),this.mh){if(this.addSets(),this.addEnchants(),this.addTempEnchants(),this.preAddRunes(),this.addBuffs(),this.addSpells(s),this.addRunes(),this.initStances(),this.talents.flurry&&(this.auras.flurry=new Flurry(this)),this.talents.deepwounds&&"classic"!==this.mode&&(this.auras.deepwounds="sod"==this.mode?new DeepWounds(this):new OldDeepWounds(this)),this.adjacent&&this.talents.deepwounds&&"classic"!==this.mode)for(let s=2;s<=this.adjacent+1;s++)this.auras["deepwounds"+s]="sod"==this.mode?new DeepWounds(this,null,s):new OldDeepWounds(this,null,s);this.spells.bloodrage&&(this.auras.bloodrage=new BloodrageAura(this)),this.spells.berserkerrage&&(this.auras.berserkerrage=new BerserkerRageAura(this)),("def"==this.basestance||"glad"==this.basestance)&&this.spells.sunderarmor&&this.devastate&&this.shield&&(this.spells.sunderarmor.devastate=!0,this.spells.sunderarmor.nocrit=!1),this.update(),this.oh&&(this.oh.timer=Math.round(1e3*this.oh.speed/this.stats.haste/2))}}initStances(){this.stance=this.basestance,this.auras.battlestance=new BattleStance(this),this.auras.berserkerstance=new BerserkerStance(this),this.auras.defensivestance=new DefensiveStance(this),this.auras.gladiatorstance=new GladiatorStance(this),"battle"==this.basestance&&(this.auras.battlestance.timer=1),"zerk"==this.basestance&&(this.auras.berserkerstance.timer=1),"def"==this.basestance&&(this.auras.defensivestance.timer=1),"glad"==this.basestance&&(this.auras.gladiatorstance.timer=1)}addRace(){for(let s of levelstats){let t;"Human"==this.race&&(t="1"),"Orc"==this.race&&(t="2"),"Dwarf"==this.race&&(t="3"),"Night Elf"==this.race&&(t="4"),"Undead"==this.race&&(t="5"),"Tauren"==this.race&&(t="6"),"Gnome"==this.race&&(t="7"),"Troll"==this.race&&(t="8");let e=s.split(",");e[0]==t&&e[2]==this.level&&(this.base.aprace=3*this.level-20,this.base.ap+=3*this.level-20,this.base.str+=parseInt(e[3]),this.base.agi+=parseInt(e[4]),this.base.skill_0+="1"==t?5:0,this.base.skill_1+="1"==t?5:0,this.base.skill_2+=0,this.base.skill_3+="2"==t?5:0)}}addTalents(){this.talents={};for(let s in talents)for(let t of talents[s].t)this.talents=Object.assign(this.talents,t.aura(t.c))}addGear(){for(let type in gear)for(let item of gear[type])if(this.testItemType==type&&this.testItem==item.id||this.testItemType!=type&&item.selected){for(let s in this.base)if("haste"==s)this.base.haste*=1+item.haste/100||1;else if("object"==typeof item[s])for(let t in item[s])this.base[s][t]+=item[s][t]||0;else item[s]&&(this.base[s]+=item[s]||0);if(item.skill&&item.skill>0)if("Varied"==item.type)this.base.skill_1+=item.skill,this.base.skill_2+=item.skill,this.base.skill_3+=item.skill;else if("FistMace"==item.type)this.base.skill_0+=item.skill,this.base.skill_4+=item.skill;else{let s=WEAPONTYPE[item.type.replace(" ","").toUpperCase()];this.base["skill_"+s]+=item.skill}if("mainhand"!=type&&"offhand"!=type&&"twohand"!=type||this.addWeapon(item,type),item.proc&&item.proc.chance&&("trinket1"==type||"trinket2"==type)){let proc={};proc.chance=100*item.proc.chance,proc.extra=item.proc.extra,proc.magicdmg=item.proc.dmg,item.spell&&(this.auras[item.proc.spell.toLowerCase()]=eval("new "+item.proc.spell+"(this)"),proc.spell=this.auras[item.proc.spell.toLowerCase()]),this["trinketproc"+(this.trinketproc1?2:1)]=proc}else if(item.proc&&item.proc.chance){let proc={};proc.chance=100*item.proc.chance,item.proc.dmg&&(proc.magicdmg=item.proc.dmg),item.proc.spell&&(this.auras[item.proc.spell.toLowerCase()]=eval("new "+item.proc.spell+"(this)"),proc.spell=this.auras[item.proc.spell.toLowerCase()]),this.attackproc2&&console.log("Warning! overlapping attack procs!"),this.attackproc1?this.attackproc2=proc:this.attackproc1=proc}this.items.push(item.id)}if(this.mh&&this.mh.twohand)for(let s in gear)for(let t of gear[s])if(!("hands"!=s&"waist"!=s&&"head"!=s)&&(this.testItemType==s&&this.testItem==t.id||this.testItemType!=s&&t.selected)&&t.skill&&t.skill>0)if("Varied"==t.type)this.base.skill_1-=t.skill,this.base.skill_2-=t.skill,this.base.skill_3-=t.skill;else if("Varied2H"==t.type)this.base.skill_0+=t.skill,this.base.skill_1+=t.skill,this.base.skill_3+=t.skill;else if("FistMace"==t.type)this.base.skill_0-=t.skill,this.base.skill_4-=t.skill;else{let s=WEAPONTYPE[t.type.replace(" ","").toUpperCase()];this.base["skill_"+s]-=t.skill}}addWeapon(s,t){let e,a;for(let s of enchant[t])s.temp||(this.testEnchType==t&&this.testEnch==s.id?e=s:this.testEnchType!=t&&s.selected&&(e=s));for(let s of enchant[t])s.temp&&(this.testTempEnchType==t&&this.testTempEnch==s.id?a=s:this.testTempEnchType!=t&&s.selected&&(a=s));"mainhand"==t&&(this.mh=new Weapon(this,s,e,a,!1,!1)),"offhand"==t&&"Shield"!=s.type&&(this.oh=new Weapon(this,s,e,a,!0,!1)),"offhand"==t&&"Shield"==s.type&&(this.shield=s),"twohand"==t&&(this.mh=new Weapon(this,s,e,a,!1,!0))}addEnchants(){for(let s in enchant)for(let t of enchant[s])if(!t.temp&&(this.testEnchType==s&&this.testEnch==t.id||this.testEnchType!=s&&t.selected))for(let s in this.base)if("haste"==s)this.base.haste*=1+t.haste/100||1;else if("object"==typeof t[s])for(let e in t[s])this.base[s][e]+=t[s][e]||0;else t[s]&&(this.base[s]+=t[s]||0)}addTempEnchants(){for(let s in enchant)for(let t of enchant[s])if(t.temp&&("mainhand"!=s&&"twohand"!=s||!this.mh.windfury)&&(this.testTempEnchType==s&&this.testTempEnch==t.id||this.testTempEnchType!=s&&t.selected))for(let s in this.base)if("haste"==s)this.base.haste*=1+t.haste/100||1;else if("object"==typeof t[s])for(let e in t[s])this.base[s][e]+=t[s][e]||0;else t[s]&&(this.base[s]+=t[s]||0)}preAddRunes(){if("undefined"!=typeof runes)for(let s in runes)for(let t of runes[s])t.selected&&(t.focusedrage&&(this.ragecostbonus=3),t.precisetiming&&(this.precisetiming=t.precisetiming))}addRunes(){if("undefined"!=typeof runes)for(let type in runes)for(let item of runes[type])item.selected&&(item.bleedrage&&(this.bleedrage=item.bleedrage),item.ragemod&&(this.ragemod=item.ragemod),item.haste2h&&this.mh.twohand&&(this.base.haste*=1+item.haste2h/100||1),item.flagellation&&(this.spells.bloodrage||this.spells.berserkerrage)&&(this.auras[item.name.toLowerCase()]=eval(`new ${item.name}(this)`)),item.dmgdw&&this.oh&&(this.base.dmgmod*=1+item.dmgdw/100||1),item.devastate&&(this.devastate=item.devastate),item.bloodsurge&&(this.bloodsurge=item.bloodsurge),item.swordboard&&(this.swordboard=item.swordboard),item.wreckingcrew&&(this.wreckingcrew=item.wreckingcrew,this.auras.wreckingcrew=new WreckingCrew(this)),item.dmgshield&&this.shield&&(this.base.dmgmod*=1+item.dmgshield/100||1),item.tasteforblood&&(this.tasteforblood=item.tasteforblood))}addSets(){for(let set of sets){let counter=0;for(let s of set.items)this.items.includes(s)&&counter++;if(0!=counter)for(let bonus of set.bonus)if(counter>=bonus.count){for(let s in bonus.stats)this.base[s]+=bonus.stats[s]||0;if(bonus.stats.procchance){let proc={};proc.chance=100*bonus.stats.procchance,bonus.stats.magicdmg&&(proc.magicdmg=bonus.stats.magicdmg),bonus.stats.procspell&&(this.auras[bonus.stats.procspell.toLowerCase()]=eval("new "+bonus.stats.procspell+"(this)"),proc.spell=this.auras[bonus.stats.procspell.toLowerCase()]),this.attackproc2&&console.log("Warning! overlapping attack procs!"),this.attackproc1?this.attackproc2=proc:this.attackproc1=proc}bonus.stats.enhancedbs&&(this.enhancedbs=!0),bonus.stats.extra&&(this.setextra=bonus.stats.extra)}}}addBuffs(){this.target.basearmorbuffed=this.target.basearmor;for(let s of buffs)s.active&&s.improvedexposed&&(this.improvedexposed=!0),s.active&&"Expose Armor"==s.name&&(this.exposed=!0),s.active&&"Homunculi"==s.name&&(this.homunculi=!0);for(let s of buffs)if(s.active){let t=0,e=0,a=0;if("battleshout"==s.group){let e=0;s.lvlmod&&(e=~~((this.level-s.minlevel+1)*s.lvlmod)),t=~~((s.ap+e+(this.enhancedbs?30:0))*(1+this.talents.impbattleshout))}if("Blessing of Might"==s.name){let e=buffs.filter(s=>s.mightmod&&s.active)[0];t=~~(s.ap*(e?e.mightmod:1))}if("Mark of the Wild"==s.name){let t=buffs.filter(s=>s.motwmod&&s.active)[0];e=~~(s.str*(t?t.motwmod:1)),a=~~(s.agi*(t?t.motwmod:1))}if("vaelbuff"==s.group&&(this.vaelbuff=!0),"dragonbreath"==s.group&&(this.dragonbreath=!0),s.bleedmod&&(this.bleedmod*=s.bleedmod),s.armor&&(this.target.basearmorbuffed-=s.armor+("Expose Armor"==s.name&&this.improvedexposed?.5*s.armor:0)),s.armorperlevel&&(this.target.basearmorbuffed-=s.armorperlevel*this.level),"Faerie Fire"==s.name&&(this.faeriefire=!0),s.dmgshield&&this.shield&&(this.base.dmgmod*=1+s.dmgshield/100||1),s.voodoofrenzy&&(this.auras.voodoofrenzy=new VoodooFrenzy(this)),s.stance){this.basestance=s.stance,"glad"!=s.stance||this.shield||(this.basestance="battle");continue}"trueshot"==s.group&&"sod"==this.mode&&(s.ap=s.apsod),this.base.ap+=t||s.ap||0,this.base.agi+=a||s.agi||0,this.base.str+=e||s.str||0,this.base.crit+=s.crit||0,this.base.hit+=s.hit||0,this.base.spellcrit+=s.spellcrit||0,this.base.agimod*=1+s.agimod/100||1,this.base.strmod*=1+s.strmod/100||1,this.base.dmgmod*=1+s.dmgmod/100||1,this.base.spelldmgmod*=1+s.spelldmgmod/100||1,this.base.haste*=1+s.haste/100||1,this.base.skill_7+=s.skill_7||0}this.target.basearmorbuffed=Math.max(this.target.basearmorbuffed,0),"undefined"!=typeof $&&$("#currentarmor").text(this.target.basearmorbuffed)}addSpells(testItem){this.preporder=[];for(let spell of spells)if(spell.item&&this.items.includes(spell.id)&&spell.id==testItem&&spell.id==testItem&&!spell.timetoendactive&&!spell.timetostartactive&&(219223==spell.id?spell.active=!0:spell.timetoendactive=!0),spell.active||spell.item&&this.items.includes(spell.id)&&(spell.timetoendactive||spell.timetostartactive)){if(!spell.aura&&this.mh.type==WEAPONTYPE.FISHINGPOLE)continue;if(spell.item&&!this.items.includes(spell.id))continue;spell.aura?this.auras[spell.classname.toLowerCase()]=eval(`new ${spell.classname}(this, ${spell.id})`):this.spells[spell.classname.toLowerCase()]=eval(`new ${spell.classname}(this, ${spell.id})`),this.preporder.push(spell)}this.preporder.sort((s,t)=>s.timetoend-t.timetoend)}reset(s){this.rage=s,this.timer=0,this.itemtimer=0,this.dodgetimer=0,this.crittimer=0,this.critdmg=1,this.spelldelay=0,this.heroicdelay=0,this.mh.timer=0,this.oh&&(this.oh.timer=Math.round(1e3*this.oh.speed/this.stats.haste/2)),this.extraattacks=0,this.batchedextras=0,this.nextswinghs=!1,this.nextswingcl=!1,this.freeslam=!1;for(let s in this.spells)this.spells[s].timer=0,this.spells[s].stacks=0;for(let s in this.auras)this.auras[s].timer=0,this.auras[s].firstuse=!0,this.auras[s].stacks=0,this.auras[s].ticksleft&&(this.auras[s].ticksleft=0),this.auras[s].saveddmg&&(this.auras[s].saveddmg=0),this.auras[s].nexttick&&(this.auras[s].nexttick=0),this.auras[s].cooldowntimer&&(this.auras[s].cooldowntimer=0),this.auras[s].tfbstep&&(this.auras[s].tfbstep=-6e3);this.auras.deepwounds&&(this.auras.deepwounds.idmg=0),this.auras.deepwounds2&&(this.auras.deepwounds2.idmg=0),this.auras.deepwounds3&&(this.auras.deepwounds3.idmg=0),this.auras.deepwounds4&&(this.auras.deepwounds4.idmg=0),this.auras.rend&&(this.auras.rend.idmg=0),this.auras.weaponbleedmh&&(this.auras.weaponbleedmh.idmg=0),this.auras.weaponbleedoh&&(this.auras.weaponbleedoh.idmg=0),this.spells.fireball&&(this.spells.fireball.idmg=0),this.spells.gunaxe&&(this.spells.gunaxe.idmg=0),this.initStances(),this.update()}update(){this.updateAuras(),this.updateArmorReduction(),this.mh.glanceChance=this.getGlanceChance(this.mh),this.mh.miss=this.getMissChance(this.mh),this.mh.dwmiss=this.mh.miss,this.mh.dodge=this.getDodgeChance(this.mh),this.oh&&(this.mh.dwmiss=this.getDWMissChance(this.mh),this.oh.glanceChance=this.getGlanceChance(this.oh),this.oh.miss=this.getMissChance(this.oh),this.oh.dwmiss=this.getDWMissChance(this.oh),this.oh.dodge=this.getDodgeChance(this.oh))}updateAuras(){for(let s in this.base)this.stats[s]=this.base[s];for(let s in this.auras)if(this.auras[s].timer){for(let t in this.auras[s].stats)this.stats[t]+=this.auras[s].stats[t];for(let t in this.auras[s].mult_stats)this.stats[t]*=1+this.auras[s].mult_stats[t]/100}this.stats.str=~~(this.stats.str*this.stats.strmod),this.stats.agi=~~(this.stats.agi*this.stats.agimod),this.stats.ap+=2*this.stats.str,this.stats.crit+=this.stats.agi*this.agipercrit,this.crit=this.getCritChance(),this.stats.block+=(this.shield?this.shield.block:0)+~~(this.stats.str/20),1!=this.stats.baseapmod&&(this.stats.ap+=~~((this.base.aprace+2*this.stats.str)*(this.stats.baseapmod-1))),this.stats.ap=~~(this.stats.ap*this.stats.apmod)}getAgiPerCrit(s){return[.25,.2381,.2381,.2273,.2174,.2083,.2083,.2,.1923,.1923,.1852,.1786,.1667,.1613,.1563,.1515,.1471,.1389,.1351,.1282,.1282,.125,.119,.1163,.1111,.1087,.1064,.102,.1,.0962,.0943,.0926,.0893,.0877,.0847,.0833,.082,.0794,.0781,.0758,.0735,.0725,.0704,.0694,.0676,.0667,.0649,.0633,.0625,.061,.0595,.0588,.0575,.0562,.0549,.0543,.0532,.0521,.051,.05][parseInt(s)-1]}getTargetSpellMiss(){let s=100,t=this.target.level-this.level;return-2==t&&(s=200),-1==t&&(s=300),0==t&&(s=400),1==t&&(s=500),2==t&&(s=600),3==t&&(s=1700),4==t&&(s=2800),t>4&&(s=2800+1100*(t-4)),s}getTargetSpellMitigation(){return 1-this.target.resistance/(100*this.level)*15}getTargetSpellBinaryResist(){return parseInt(1e4-(1e4-this.target.misschance)*(1-.15*this.target.resistance/(100*this.level)))}updateStrength(){this.stats.str=this.base.str,this.stats.ap=this.base.ap,this.stats.apmod=this.base.apmod,this.stats.baseapmod=this.base.baseapmod;for(let s in this.auras)this.auras[s].timer&&(this.auras[s].stats.str&&(this.stats.str+=this.auras[s].stats.str),this.auras[s].stats.ap&&(this.stats.ap+=this.auras[s].stats.ap),this.auras[s].mult_stats.apmod&&(this.stats.apmod*=1+this.auras[s].mult_stats.apmod/100),this.auras[s].mult_stats.baseapmod&&(this.stats.baseapmod*=1+this.auras[s].mult_stats.baseapmod/100));this.stats.str=~~(this.stats.str*this.stats.strmod),this.stats.ap+=2*this.stats.str,this.stats.block+=(this.shield?this.shield.block:0)+~~(this.stats.str/20),1!=this.stats.baseapmod&&(this.stats.ap+=~~((this.base.aprace+2*this.stats.str)*(this.stats.baseapmod-1))),this.stats.ap=~~(this.stats.ap*this.stats.apmod)}updateAP(){this.stats.ap=this.base.ap,this.stats.apmod=this.base.apmod,this.stats.baseapmod=this.base.apmod;for(let s in this.auras)this.auras[s].timer&&this.auras[s].stats.ap&&(this.stats.ap+=this.auras[s].stats.ap),this.auras[s].timer&&this.auras[s].mult_stats.apmod&&(this.stats.apmod*=1+this.auras[s].mult_stats.apmod/100),this.auras[s].timer&&this.auras[s].mult_stats.baseapmod&&(this.stats.baseapmod*=1+this.auras[s].mult_stats.baseapmod/100);this.stats.ap+=2*this.stats.str,1!=this.stats.baseapmod&&(this.stats.ap+=~~((this.base.aprace+2*this.stats.str)*(this.stats.baseapmod-1))),this.stats.ap=~~(this.stats.ap*this.stats.apmod)}updateHaste(){this.stats.haste=this.base.haste,this.auras.flurry&&this.auras.flurry.timer&&(this.stats.haste*=1+this.auras.flurry.mult_stats.haste/100),this.auras.berserking&&this.auras.berserking.timer&&(this.stats.haste*=1+this.auras.berserking.mult_stats.haste/100),this.auras.empyrean&&this.auras.empyrean.timer&&(this.stats.haste*=1+this.auras.empyrean.mult_stats.haste/100),this.auras.eskhandar&&this.auras.eskhandar.timer&&(this.stats.haste*=1+this.auras.eskhandar.mult_stats.haste/100),this.auras.pummeler&&this.auras.pummeler.timer&&(this.stats.haste*=1+this.auras.pummeler.mult_stats.haste/100),this.auras.spider&&this.auras.spider.timer&&(this.stats.haste*=1+this.auras.spider.mult_stats.haste/100),this.auras.voidmadness&&this.auras.voidmadness.timer&&(this.stats.haste*=1+this.auras.voidmadness.mult_stats.haste/100),this.auras.jackhammer&&this.auras.jackhammer.timer&&(this.stats.haste*=1+this.auras.jackhammer.mult_stats.haste/100),this.auras.ragehammer&&this.auras.ragehammer.timer&&(this.stats.haste*=1+this.auras.ragehammer.mult_stats.haste/100),this.auras.blisteringragehammer&&this.auras.blisteringragehammer.timer&&(this.stats.haste*=1+this.auras.blisteringragehammer.mult_stats.haste/100),this.auras.gyromaticacceleration&&this.auras.gyromaticacceleration.timer&&(this.stats.haste*=1+this.auras.gyromaticacceleration.mult_stats.haste/100),this.auras.gneurological&&this.auras.gneurological.timer&&(this.stats.haste*=1+this.auras.gneurological.mult_stats.haste/100),this.auras.spicy&&this.auras.spicy.timer&&(this.stats.haste*=1+this.auras.spicy.mult_stats.haste/100),this.auras.echoesdread&&this.auras.echoesdread.timer&&(this.stats.haste*=1+this.auras.echoesdread.mult_stats.haste/100)}updateBonusDmg(){let s=0;this.auras.stoneslayer&&this.auras.stoneslayer.timer&&(s+=this.auras.stoneslayer.stats.bonusdmg),this.auras.zeal&&this.auras.zeal.timer&&(s+=this.auras.zeal.stats.bonusdmg),this.auras.zandalarian&&this.auras.zandalarian.timer&&(s+=this.auras.zandalarian.stats.bonusdmg),this.auras.relentlessstrength&&this.auras.relentlessstrength.timer&&(s+=this.auras.relentlessstrength.stats.bonusdmg),this.auras.blisteringragehammer&&this.auras.blisteringragehammer.timer&&(s+=this.auras.blisteringragehammer.stats.bonusdmg),this.mh.bonusdmg=this.mh.basebonusdmg+s,this.oh&&(this.oh.bonusdmg=this.oh.basebonusdmg+s)}updateArmorReduction(){this.target.armor=this.target.basearmorbuffed,this.auras.annihilator&&this.auras.annihilator.timer&&(this.target.armor=Math.max(this.target.armor-this.auras.annihilator.stacks*this.auras.annihilator.armor,0)),this.auras.rivenspike&&this.auras.rivenspike.timer&&(this.target.armor=Math.max(this.target.armor-this.auras.rivenspike.stacks*this.auras.rivenspike.armor,0)),this.auras.vibroblade&&this.auras.vibroblade.timer&&(this.target.armor=Math.max(this.target.armor-this.auras.vibroblade.armor,0)),this.auras.ultrasonic&&this.auras.ultrasonic.timer&&(this.target.armor=Math.max(this.target.armor-this.auras.ultrasonic.armor,0)),this.auras.cleavearmor&&this.auras.cleavearmor.timer&&(this.target.armor=Math.max(this.target.armor-this.auras.cleavearmor.armor,0)),this.auras.bonereaver&&this.auras.bonereaver.timer&&(this.target.armor=Math.max(this.target.armor-this.auras.bonereaver.stacks*this.auras.bonereaver.armor,0)),this.auras.swarmguard&&this.auras.swarmguard.timer&&(this.target.armor=Math.max(this.target.armor-this.auras.swarmguard.stacks*this.auras.swarmguard.armor,0)),this.armorReduction=this.getArmorReduction()}updateDmgMod(){this.stats.dmgmod=this.base.dmgmod,this.stats.spelldmgmod=this.base.spelldmgmod;for(let s in this.auras)this.auras[s].timer&&this.auras[s].mult_stats.dmgmod&&(this.stats.dmgmod*=1+this.auras[s].mult_stats.dmgmod/100)}getGlanceReduction(s){let t=this.target.defense-this.stats["skill_"+s.type],e=Math.max(Math.min(1.3-.05*t,.91),.01),a=Math.max(Math.min(1.2-.03*t,.99),.2);return Math.random()*(a-e)+e}getGlanceChance(s){return 10+2*Math.max(this.target.defense-Math.min(5*this.level,this.stats["skill_"+s.type]),0)}getMissChance(s){let t=this.target.defense-this.stats["skill_"+s.type],e=5+(t>10?.2*t:.1*t);return e-=t>10?this.stats.hit-1:this.stats.hit}getDWMissChance(s){let t=this.target.defense-this.stats["skill_"+s.type],e=5+(t>10?.2*t:.1*t);return e=.8*e+20,e-=t>10?this.stats.hit-1:this.stats.hit}getCritChance(){let s=this.stats.crit+(this.talents.crit||0)+1*(this.level-this.target.level);return this.target.level-this.level>=3&&(s-=1.8),Math.max(s,0)}getDodgeChance(s){return Math.max(5+.1*(this.target.defense-this.stats["skill_"+s.type]),0)}getArmorReduction(){isNaN(this.target.armor)&&(this.target.armor=0);let s=this.target.armor/(this.target.armor+400+85*this.level);return s>.75?.75:s}addRage(s,t,e,a){let i=this.rage;(!a||a instanceof HeroicStrike||a instanceof Cleave)&&t!=RESULT.MISS&&t!=RESULT.DODGE&&this.talents.umbridledwrath&&rng10k()<100*this.talents.umbridledwrath&&(this.rage+=1),a?(a instanceof Execute&&(a.result=t),t!=RESULT.MISS&&t!=RESULT.DODGE||(this.rage+=a.refund?.8*a.cost:0,i+=(a.cost||0)+(a.usedrage||0))):t==RESULT.DODGE?this.rage+=e.avgdmg()/this.rageconversion*7.5*.75:t!=RESULT.MISS&&(this.rage+=s/this.rageconversion*7.5*this.ragemod),this.rage>100&&(this.rage=100),this.auras.consumedrage&&i<80&&this.rage>=80&&this.auras.consumedrage.use()}steptimer(s){return this.timer<=s?(this.timer=0,log&&this.log("Global CD off"),!0):(this.timer-=s,!1)}stepitemtimer(s){return this.itemtimer<=s?(this.itemtimer=0,log&&this.log("Item CD off"),!0):(this.itemtimer-=s,!1)}stepdodgetimer(s){this.dodgetimer<=s?this.dodgetimer=0:this.dodgetimer-=s}stepauras(s){this.mh.proc1&&this.mh.proc1.spell&&this.mh.proc1.spell.timer&&this.mh.proc1.spell.step(),this.mh.proc2&&this.mh.proc2.spell&&this.mh.proc2.spell.timer&&this.mh.proc2.spell.step(),this.oh&&this.oh.proc1&&this.oh.proc1.spell&&this.oh.proc1.spell.timer&&this.oh.proc1.spell.step(),this.oh&&this.oh.proc2&&this.oh.proc2.spell&&this.oh.proc2.spell.timer&&this.oh.proc2.spell.step(),this.auras.mightyragepotion&&this.auras.mightyragepotion.firstuse&&this.auras.mightyragepotion.timer&&this.auras.mightyragepotion.step(),this.auras.mildlyirradiated&&this.auras.mildlyirradiated.firstuse&&this.auras.mildlyirradiated.timer&&this.auras.mildlyirradiated.step(),this.auras.recklessness&&this.auras.recklessness.firstuse&&this.auras.recklessness.timer&&this.auras.recklessness.step(),this.auras.deathwish&&this.auras.deathwish.firstuse&&this.auras.deathwish.timer&&this.auras.deathwish.step(),this.auras.cloudkeeper&&this.auras.cloudkeeper.firstuse&&this.auras.cloudkeeper.timer&&this.auras.cloudkeeper.step(),this.auras.voidmadness&&this.auras.voidmadness.firstuse&&this.auras.voidmadness.timer&&this.auras.voidmadness.step(),this.auras.gyromaticacceleration&&this.auras.gyromaticacceleration.firstuse&&this.auras.gyromaticacceleration.timer&&this.auras.gyromaticacceleration.step(),this.auras.gneurological&&this.auras.gneurological.firstuse&&this.auras.gneurological.timer&&this.auras.gneurological.step(),this.auras.coinflip&&this.auras.coinflip.timer&&this.auras.coinflip.step(),this.auras.flask&&this.auras.flask.firstuse&&this.auras.flask.timer&&this.auras.flask.step(),this.auras.bloodfury&&this.auras.bloodfury.firstuse&&this.auras.bloodfury.timer&&this.auras.bloodfury.step(),this.auras.berserking&&this.auras.berserking.firstuse&&this.auras.berserking.timer&&this.auras.berserking.step(),this.auras.slayer&&this.auras.slayer.firstuse&&this.auras.slayer.timer&&this.auras.slayer.step(),this.auras.spider&&this.auras.spider.firstuse&&this.auras.spider.timer&&this.auras.spider.step(),this.auras.earthstrike&&this.auras.earthstrike.firstuse&&this.auras.earthstrike.timer&&this.auras.earthstrike.step(),this.auras.roarguardian&&this.auras.roarguardian.firstuse&&this.auras.roarguardian.timer&&this.auras.roarguardian.step(),this.auras.pummeler&&this.auras.pummeler.firstuse&&this.auras.pummeler.timer&&this.auras.pummeler.step(),this.auras.swarmguard&&this.auras.swarmguard.firstuse&&this.auras.swarmguard.timer&&this.auras.swarmguard.step(),this.auras.zandalarian&&this.auras.zandalarian.firstuse&&this.auras.zandalarian.timer&&this.auras.zandalarian.step(),this.auras.relentlessstrength&&this.auras.relentlessstrength.firstuse&&this.auras.relentlessstrength.timer&&this.auras.relentlessstrength.step(),this.auras.rampage&&this.auras.rampage.timer&&this.auras.rampage.step(),this.auras.wreckingcrew&&this.auras.wreckingcrew.timer&&this.auras.wreckingcrew.step(),this.auras.voodoofrenzy&&this.auras.voodoofrenzy.timer&&this.auras.voodoofrenzy.step(),this.mh.windfury&&this.mh.windfury.timer&&this.mh.windfury.step(),this.trinketproc1&&this.trinketproc1.spell&&this.trinketproc1.spell.timer&&this.trinketproc1.spell.step(),this.trinketproc2&&this.trinketproc2.spell&&this.trinketproc2.spell.timer&&this.trinketproc2.spell.step(),this.attackproc1&&this.attackproc1.spell&&this.attackproc1.spell.timer&&this.attackproc1.spell.step(),this.attackproc2&&this.attackproc2.spell&&this.attackproc2.spell.timer&&this.attackproc2.spell.step(),!s&&this.auras.deepwounds&&this.auras.deepwounds.timer&&this.auras.deepwounds.step(),!s&&this.auras.rend&&this.auras.rend.timer&&this.auras.rend.step(),this.auras.flagellation&&this.auras.flagellation.timer&&this.auras.flagellation.step(),this.auras.berserkerrage&&this.auras.berserkerrage.timer&&this.auras.berserkerrage.step(),this.auras.consumedrage&&this.auras.consumedrage.timer&&this.auras.consumedrage.step(),this.auras.weaponbleedmh&&this.auras.weaponbleedmh.timer&&this.auras.weaponbleedmh.step(),this.auras.weaponbleedoh&&this.auras.weaponbleedoh.timer&&this.auras.weaponbleedoh.step(),!s&&this.adjacent&&(this.auras.deepwounds2&&this.auras.deepwounds2.timer&&this.auras.deepwounds2.step(),this.auras.deepwounds3&&this.auras.deepwounds3.timer&&this.auras.deepwounds3.step(),this.auras.deepwounds4&&this.auras.deepwounds4.timer&&this.auras.deepwounds4.step())}endauras(){this.mh.proc1&&this.mh.proc1.spell&&this.mh.proc1.spell.timer&&this.mh.proc1.spell.end(),this.mh.proc2&&this.mh.proc2.spell&&this.mh.proc2.spell.timer&&this.mh.proc2.spell.end(),this.oh&&this.oh.proc1&&this.oh.proc1.spell&&this.oh.proc1.spell.timer&&this.oh.proc1.spell.end(),this.oh&&this.oh.proc2&&this.oh.proc2.spell&&this.oh.proc2.spell.timer&&this.oh.proc2.spell.end(),this.auras.mightyragepotion&&this.auras.mightyragepotion.firstuse&&this.auras.mightyragepotion.timer&&this.auras.mightyragepotion.end(),this.auras.mildlyirradiated&&this.auras.mildlyirradiated.firstuse&&this.auras.mildlyirradiated.timer&&this.auras.mildlyirradiated.end(),this.auras.recklessness&&this.auras.recklessness.firstuse&&this.auras.recklessness.timer&&this.auras.recklessness.end(),this.auras.deathwish&&this.auras.deathwish.firstuse&&this.auras.deathwish.timer&&this.auras.deathwish.end(),this.auras.cloudkeeper&&this.auras.cloudkeeper.firstuse&&this.auras.cloudkeeper.timer&&this.auras.cloudkeeper.end(),this.auras.voidmadness&&this.auras.voidmadness.firstuse&&this.auras.voidmadness.timer&&this.auras.voidmadness.end(),this.auras.gyromaticacceleration&&this.auras.gyromaticacceleration.firstuse&&this.auras.gyromaticacceleration.timer&&this.auras.gyromaticacceleration.end(),this.auras.gneurological&&this.auras.gneurological.firstuse&&this.auras.gneurological.timer&&this.auras.gneurological.end(),this.auras.coinflip&&this.auras.coinflip.timer&&this.auras.coinflip.end(),this.auras.flask&&this.auras.flask.firstuse&&this.auras.flask.timer&&this.auras.flask.end(),this.auras.bloodfury&&this.auras.bloodfury.firstuse&&this.auras.bloodfury.timer&&this.auras.bloodfury.end(),this.auras.berserking&&this.auras.berserking.firstuse&&this.auras.berserking.timer&&this.auras.berserking.end(),this.auras.slayer&&this.auras.slayer.firstuse&&this.auras.slayer.timer&&this.auras.slayer.end(),this.auras.spider&&this.auras.spider.firstuse&&this.auras.spider.timer&&this.auras.spider.end(),this.auras.gabbar&&this.auras.gabbar.firstuse&&this.auras.gabbar.timer&&this.auras.gabbar.end(),this.auras.earthstrike&&this.auras.earthstrike.firstuse&&this.auras.earthstrike.timer&&this.auras.earthstrike.end(),this.auras.roarguardian&&this.auras.roarguardian.firstuse&&this.auras.roarguardian.timer&&this.auras.roarguardian.end(),this.auras.pummeler&&this.auras.pummeler.firstuse&&this.auras.pummeler.timer&&this.auras.pummeler.end(),this.auras.swarmguard&&this.auras.swarmguard.firstuse&&this.auras.swarmguard.timer&&this.auras.swarmguard.end(),this.auras.zandalarian&&this.auras.zandalarian.firstuse&&this.auras.zandalarian.timer&&this.auras.zandalarian.end(),this.auras.relentlessstrength&&this.auras.relentlessstrength.firstuse&&this.auras.relentlessstrength.timer&&this.auras.relentlessstrength.end(),this.auras.rampage&&this.auras.rampage.timer&&this.auras.rampage.end(),this.auras.wreckingcrew&&this.auras.wreckingcrew.timer&&this.auras.wreckingcrew.end(),this.auras.voodoofrenzy&&this.auras.voodoofrenzy.timer&&this.auras.voodoofrenzy.end(),this.mh.windfury&&this.mh.windfury.timer&&this.mh.windfury.end(),this.trinketproc1&&this.trinketproc1.spell&&this.trinketproc1.spell.timer&&this.trinketproc1.spell.end(),this.trinketproc2&&this.trinketproc2.spell&&this.trinketproc2.spell.timer&&this.trinketproc2.spell.end(),this.attackproc1&&this.attackproc1.spell&&this.attackproc1.spell.timer&&this.attackproc1.spell.end(),this.attackproc2&&this.attackproc2.spell&&this.attackproc2.spell.timer&&this.attackproc2.spell.end(),this.auras.flurry&&this.auras.flurry.timer&&this.auras.flurry.end(),this.auras.deepwounds&&this.auras.deepwounds.timer&&this.auras.deepwounds.end(),this.auras.deepwounds2&&this.auras.deepwounds2.timer&&this.auras.deepwounds2.end(),this.auras.deepwounds3&&this.auras.deepwounds3.timer&&this.auras.deepwounds3.end(),this.auras.deepwounds4&&this.auras.deepwounds4.timer&&this.auras.deepwounds4.end(),this.auras.rend&&this.auras.rend.timer&&this.auras.rend.end(),this.auras.flagellation&&this.auras.flagellation.timer&&this.auras.flagellation.end(),this.auras.berserkerrage&&this.auras.berserkerrage.timer&&this.auras.berserkerrage.end(),this.auras.consumedrage&&this.auras.consumedrage.timer&&this.auras.consumedrage.end(),this.auras.weaponbleedmh&&this.auras.weaponbleedmh.timer&&this.auras.weaponbleedmh.end(),this.auras.weaponbleedoh&&this.auras.weaponbleedoh.timer&&this.auras.weaponbleedoh.end()}rollweapon(s){let t=0,e=rng10k();return e<(t+=100*Math.max(this.nextswinghs?s.miss:s.dwmiss,0))?RESULT.MISS:e<(t+=100*s.dodge)?RESULT.DODGE:e<(t+=100*s.glanceChance)?RESULT.GLANCE:e<(t+=100*(this.crit+s.crit))?RESULT.CRIT:RESULT.HIT}rollspell(s){let t=0,e=rng10k();if(e<(t+=100*Math.max(this.mh.miss,0)))return RESULT.MISS;if(s.canDodge&&e<(t+=100*this.mh.dodge))return RESULT.DODGE;s.weaponspell||(e=rng10k(),t=0);let a=this.crit+this.mh.crit;return s instanceof Overpower&&(a+=this.talents.overpowercrit),e<(t+=100*a)&&!s.nocrit?RESULT.CRIT:RESULT.HIT}attackmh(s,t,e){this.stepauras();let a,i=null,r=0;this.nextswinghs?(this.nextswinghs=!1,this.spells.heroicstrike&&this.spells.heroicstrike.cost<=this.rage?(a=this.rollspell(this.spells.heroicstrike),i=this.spells.heroicstrike,this.rage-=i.cost):this.spells.cleave&&this.spells.cleave.cost<=this.rage?(a=this.rollspell(this.spells.cleave),i=this.spells.cleave,t&&(this.rage-=i.cost)):(a=this.rollweapon(s),log&&this.log("Heroic Strike auto canceled"))):a=this.rollweapon(s);let h=s.dmg(i);r=this.procattack(i,s,a,t,e),a==RESULT.DODGE&&(this.dodgetimer=5e3),a==RESULT.GLANCE&&(h*=this.getGlanceReduction(s)),a==RESULT.CRIT&&(h*=1+(1+(i?this.talents.abilitiescrit:0))*(1+2*(this.critdmg-1)),this.proccrit(!1,t)),s.use();let l=this.dealdamage(h,a,s,i,t);return i?(i.totaldmg+=l,t||i.data[a]++):(s.totaldmg+=l,s.data[a]++),s.totalprocdmg+=r,log&&this.log(`${i?i.name+" for":"Main hand attack for"} ${~~l} (${Object.keys(RESULT)[a]})${t?" (Adjacent)":""}`),i instanceof Cleave&&!t&&(this.nextswinghs=!0,l+=this.attackmh(s,1,l)),l+r}attackoh(s){this.stepauras();let t,e=0;t=this.rollweapon(s);let a=s.dmg();e=this.procattack(null,s,t),t==RESULT.DODGE&&(this.dodgetimer=5e3),t==RESULT.GLANCE&&(a*=this.getGlanceReduction(s)),t==RESULT.CRIT&&(this.proccrit(!0),a*=2,a*=this.critdmg),s.use();let i=this.dealdamage(a,t,s);return s.data[t]++,s.totaldmg+=i,s.totalprocdmg+=e,log&&this.log(`Off hand attack for ${i+e} (${Object.keys(RESULT)[t]})${this.nextswinghs?" (HS queued)":""}`),i+e}cast(s,t,e,a){if(e||(this.stepauras(),s.use(t)),s.useonly)return log&&this.log(`${s.name} used`),0;let i=0,r=s.dmg()*this.mh.modifier,h=this.rollspell(s);i=this.procattack(s,this.mh,h,e,a),s instanceof SunderArmor&&(i+=this.procattack(s,this.mh,h,e,a)),h==RESULT.MISS?s.failed():h==RESULT.DODGE?(s.failed(),this.dodgetimer=5e3):h==RESULT.CRIT&&(this.proccrit(!1,e,s),r*=1+(1+this.talents.abilitiescrit)*(1+2*(this.critdmg-1)));let l=this.dealdamage(r,h,this.mh,s,e);return e||s.data[h]++,s.totaldmg+=l,this.mh.totalprocdmg+=i,log&&this.log(`${s.name} for ${~~l} (${Object.keys(RESULT)[h]})${e?" (Adjacent)":""}.`),l+i}dealdamage(s,t,e,a,i){return t!=RESULT.MISS&&t!=RESULT.DODGE?(s*=this.stats.dmgmod,s*=1-this.armorReduction,i||this.addRage(s,t,e,a),s):(i||this.addRage(s,t,e,a),0)}proccrit(s,t,e){this.crittimer=1,this.auras.flurry&&this.auras.flurry.use(),this.auras.deepwounds&&(t?this.auras["deepwounds"+(1+~~rng(1,t))].use(s):this.auras.deepwounds.use(s)),this.auras.wreckingcrew&&this.auras.wreckingcrew.use()}procattack(s,t,e,a,i){let r=0,h=0,l=0;return s instanceof ShieldSlam?0:(e!=RESULT.MISS&&e!=RESULT.DODGE&&(t.proc1&&!t.proc1.extra&&rng10k()<t.proc1.chance&&!(t.proc1.gcd&&this.timer&&this.timer<1500)&&(t.proc1.spell&&t.proc1.spell.use(),t.proc1.magicdmg&&(r+=1e4==t.proc1.chance?t.proc1.magicdmg:this.magicproc(t.proc1)),t.proc1.physdmg&&(r+=this.physproc(t.proc1.physdmg)),log&&this.log(`${t.name} proc ${r?"for "+~~r:""}`)),t.proc1&&t.proc1.extra&&!i&&rng10k()<t.proc1.chance&&!(t.proc1.gcd&&this.timer&&this.timer<1500)&&(s?this.extraattacks+=t.proc1.extra:h=t.proc1.extra,log&&this.log(`${t.name} proc ${r?"for "+~~r:""}`)),t.proc2&&rng10k()<t.proc2.chance&&(t.proc2.spell&&t.proc2.spell.use(),t.proc2.magicdmg&&(r+=this.magicproc(t.proc2)),log&&this.log(`${t.name} proc ${r?"for "+~~r:""}`)),this.trinketproc1&&!this.trinketproc1.extra&&rng10k()<this.trinketproc1.chance&&(this.trinketproc1.magicdmg&&(r+=this.magicproc(this.trinketproc1)),this.trinketproc1.spell&&this.trinketproc1.spell.use(),log&&this.log("Trinket 1 proc")),this.trinketproc1&&this.trinketproc1.extra&&!i&&rng10k()<this.trinketproc1.chance&&(s?this.batchedextras+=this.trinketproc1.extra:l=this.trinketproc1.extra,log&&this.log("Trinket 1 proc")),this.trinketproc2&&!this.trinketproc2.extra&&rng10k()<this.trinketproc2.chance&&(this.trinketproc2.magicdmg&&(r+=this.magicproc(this.trinketproc2)),this.trinketproc2.spell&&this.trinketproc2.spell.use(),log&&this.log("Trinket 2 proc")),this.trinketproc2&&this.trinketproc2.extra&&!i&&rng10k()<this.trinketproc2.chance&&(s?this.batchedextras+=this.trinketproc2.extra:l=this.trinketproc2.extra,log&&this.log("Trinket 2 proc")),this.attackproc1&&rng10k()<this.attackproc1.chance&&(this.attackproc1.magicdmg&&(r+=1e4==this.attackproc1.chance?this.attackproc1.magicdmg:this.magicproc(this.attackproc1),log&&this.log(`Attack proc for ${r}`)),this.attackproc1.spell&&this.attackproc1.spell.use()),this.attackproc2&&rng10k()<this.attackproc2.chance&&(this.attackproc2.magicdmg&&(r+=1e4==this.attackproc2.chance?this.attackproc2.magicdmg:this.magicproc(this.attackproc2),log&&this.log(`Attack proc for ${r}`)),this.attackproc2.spell&&this.attackproc2.spell.use()),this.talents.swordproc&&t.type==WEAPONTYPE.SWORD&&!i&&this.swordspecstep!=step&&rng10k()<100*this.talents.swordproc&&(this.swordspecstep=step,s?this.extraattacks++:h++,log&&this.log("Sword talent proc")),this.setextra&&!i&&this.setextrastep!=step&&rng10k()<500&&(this.setextrastep=step,s?this.extraattacks++:h++,log&&this.log("Set bonus extra attack proc")),this.bloodsurge&&(s instanceof Whirlwind||s instanceof Bloodthirst||s instanceof HeroicStrike||s instanceof QuickStrike)&&rng10k()<3e3&&(this.freeslam=!0,log&&this.log("Blood Surge proc")),this.swordboard&&this.spells.shieldslam&&s instanceof SunderArmor&&rng10k()<3e3&&(this.freeshieldslam=!0,this.spells.shieldslam.timer=0,log&&this.log("Sword and Board proc")),this.auras.rampage&&this.auras.rampage.timer&&this.auras.rampage.stacks<5&&(this.auras.rampage.proc(),log&&this.log("Rampage proc")),this.auras.voodoofrenzy&&rng10k()<1500&&this.auras.voodoofrenzy.use(),t.windfury&&!this.auras.windfury.timer&&!i&&rng10k()<2e3&&(s||(h=0),t.windfury.use()),this.auras.swarmguard&&this.auras.swarmguard.timer&&rng10k()<this.auras.swarmguard.chance&&this.auras.swarmguard.proc(),this.auras.zandalarian&&this.auras.zandalarian.timer&&this.auras.zandalarian.proc(),this.auras.relentlessstrength&&this.auras.relentlessstrength.timer&&this.auras.relentlessstrength.proc(),this.dragonbreath&&rng10k()<400&&(r+=this.magicproc({magicdmg:60,coeff:1})),h&&(this.extraattacks+=h),l&&(this.batchedextras+=l)),!s&&this.auras.flurry&&this.auras.flurry.stacks&&this.auras.flurry.proc(),!a&&this.auras.consumedrage&&this.auras.consumedrage.stacks&&this.auras.consumedrage.proc(),!s&&this.mh.windfury&&this.mh.windfury.stacks&&this.mh.windfury.proc(),r)}magicproc(s){let t=1,e=this.target.misschance,a=s.magicdmg;return s.binaryspell?e=this.target.binaryresist:t*=this.target.mitigation,rng10k()<e?0:(rng10k()<100*this.stats.spellcrit&&(t*=1.5),s.coeff&&(a+=this.spelldamage*s.coeff),a*t*this.stats.spelldmgmod)}physproc(s){let t=0,e=rng10k();return e<(t+=100*Math.max(this.mh.miss,0))&&(s=0),e<(t+=100*this.mh.dodge)&&(s=0),(e=rng10k())<100*(this.crit+this.mh.crit)&&(s*=2),s*this.stats.dmgmod*this.mh.modifier}serializeStats(){return{auras:this.auras,spells:this.spells,mh:this.mh,oh:this.oh}}log(s){let t="GoldenRod";s.indexOf("attack")>1||s.indexOf("Global")>-1?t="Gray":s.indexOf("tick")>1?t="Tomato":s.indexOf(" for ")>-1?t="DarkOrchid":(s.indexOf("applied")>1||s.indexOf("removed")>-1)&&(t="#17A8B6"),console.log(`%c ${step.toString().padStart(5," ")} | ${this.rage.toFixed(2).padStart(6," ")} | ${s}`,`color: ${t}`)}switch(s){this.stance!=s&&"glad"!=this.stance&&(this.stance=s,this.auras.battlestance.timer=0,this.auras.berserkerstance.timer=0,this.auras.defensivestance.timer=0,this.auras.gladiatorstance.timer=0,"battle"==s&&(this.auras.battlestance.timer=1),"zerk"==s&&(this.auras.berserkerstance.timer=1),"def"==s&&(this.auras.defensivestance.timer=1),"glad"==s&&(this.auras.gladiatorstance.timer=1),this.rage=Math.min(this.rage,this.talents.rageretained),this.updateAuras(),log&&this.log(`Switched to ${s} stance`))}}